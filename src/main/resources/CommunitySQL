-- liky 테이블
CREATE TABLE likes(
    c_num INT NOT NULL,
    user_num INT NOT NULL,
    like_user_profile TEXT,
    like_user_nickname VARCHAR(30) NOT NULL,
    PRIMARY KEY (c_num, user_num),
    FOREIGN KEY (c_num) REFERENCES commu(c_num),
    FOREIGN KEY (user_num) REFERENCES user(user_num)
);

-- comment 테이블
CREATE TABLE comment(
    comment_id INT PRIMARY KEY AUTO_INCREMENT,
    c_num INT NOT NULL,
    user_num INT NOT NULL,
    comment_user_profile TEXT,
    comment_user_nickname VARCHAR(30) NOT NULL,
    comment_write_date DATE NOT NULL,
    comment_content TEXT NOT NULL,
    FOREIGN KEY (c_num) REFERENCES commu(c_num),
    FOREIGN KEY (user_num) REFERENCES user(user_num)
);

-- pupularsearch 테이블
-- 이 테이블은 특정 사용자나 게시물에 대한 참조가 없으므로 FOREIGN KEY는 필요하지 않습니다.
CREATE TABLE pupularsearch(
    pupular_term VARCHAR(200) PRIMARY KEY,
    popular_search_count INT DEFAULT 1
);

-- commu (커뮤니티 게시글) 테이블
CREATE TABLE commu (
    c_num INT PRIMARY KEY AUTO_INCREMENT,
    c_title VARCHAR(200) NOT NULL,
    c_content TEXT NOT NULL,
    c_image TEXT,
    c_file TEXT,
    c_writer_email VARCHAR(50) NOT NULL,
    c_writer_profile TEXT,
    c_writer_nickname VARCHAR(3) NOT NULL,
    c_writer_date DATE NOT NULL,
    c_view_count INT DEFAULT 0,
    c_like_count INT DEFAULT 0,
    c_comment_count INT DEFAULT 0,
    FOREIGN KEY (c_writer_email) REFERENCES user(user_email)
);

#User-Community관계도
#1. User가 Community를 작성한다.             - 1 : n
#2. User가 Community에 좋아요를 작성한다.      - n : m
#3. User가 Community에 댓글을 단다.          - n : m